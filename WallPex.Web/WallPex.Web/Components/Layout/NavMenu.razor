@implements IDisposable

@inject NavigationManager NavigationManager

<div class="top-row ps-3 my-2 navbar navbar-dark">
    <div class="container-fluid justify-content-start">
        <a class="navbar-brand" href="">
            @* <img class="logo-icon" src="images/logo.png" alt="logo" width="30" height="30" /> *@
            <img class="logo-text" src="images/WallPex.png" alt="logo" width="100" height="25" />
        </a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <NavItem Href="" Name="Home" Icon="fa-home" />
        <NavItem Href="categories" Name="Categories" Icon="fa-list" />
        <NavItem Href="collections" Name="Collections" Icon="fa-compact-disc" />

        <AuthorizeView>
            <Authorized>
                <NavItem Href="Account/Manage" Name="@context.User.Identity?.Name" Icon="fa-user-alt" />
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="fas fa-sign-out-alt" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <NavItem Href="Account/Login" Name="Login" Icon="fa-id-badge"/>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}

